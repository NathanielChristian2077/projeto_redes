# AVALIAÇÃO 3 - REDES DE COMPUTADORES I

## Implementação das Partes 2 e 3

### PARTE 2: Servidor de Arquivos TCP

Implementa um sistema cliente-servidor para transferência de arquivos usando protocolo TCP e formato JSON.

#### Arquivos:
- `tcp_file_server.py` - Servidor de arquivos
- `tcp_file_client.py` - Cliente de arquivos

#### Como executar:

1. **Iniciar o servidor:**
```bash
python tcp_file_server.py
```
O servidor será iniciado na porta 8080 e criará automaticamente a pasta `server_files` para armazenar os arquivos.

2. **Executar o cliente:**
```bash
python tcp_file_client.py
```
O cliente apresentará um menu interativo com as opções:
- Listar arquivos do servidor
- Fazer upload de arquivo
- Fazer download de arquivo
- Sair

#### Funcionalidades implementadas:
- **LIST_REQ/LIST_RESP**: Lista todos os arquivos no servidor
- **PUT_REQ/PUT_RESP**: Upload de arquivo com verificação de integridade (hash SHA-256)
- **GET_REQ/GET_RESP**: Download de arquivo com verificação de integridade
- Codificação Base64 para transferência de arquivos binários
- Multi-threading no servidor para múltiplos clientes simultâneos

### PARTE 3: Sistema de Monitoramento UDP

Implementa um sistema de monitoramento e controle de dispositivos IoT usando protocolo UDP.

#### Arquivos:
- `udp_monitoring_server.py` - Servidor de monitoramento
- `udp_monitoring_client.py` - Cliente com interface gráfica
- `server_config.json` - Arquivo de configuração dos dispositivos

#### Como executar:

1. **Salvar o arquivo de configuração:**
Salve o conteúdo do `server_config.json` em um arquivo com este nome no mesmo diretório do servidor.

2. **Iniciar o servidor:**
```bash
python udp_monitoring_server.py
```
O servidor será iniciado na porta 9090 e carregará a configuração do arquivo JSON.

3. **Executar o cliente:**
```bash
python udp_monitoring_client.py
```
Uma interface gráfica será aberta com funcionalidades completas de monitoramento.

#### Funcionalidades implementadas:

**Servidor:**
- **LIST**: Lista todos os ambientes e dispositivos
- **GET**: Obtém estado/valor de dispositivo específico ou todos
- **SET**: Altera estado/valor de atuadores
- Simulação automática de sensores (temperatura e umidade)
- Carregamento de configuração via arquivo JSON
- Diferenciação entre sensores (somente leitura) e atuadores (leitura/escrita)

**Cliente:**
- Interface gráfica completa com Tkinter
- Visualização em tempo real dos dispositivos
- Monitoramento automático com intervalo configurável
- Controle interativo de atuadores (duplo clique)
- Log de atividades em tempo real
- Configuração de servidor e porta

#### Tipos de dispositivos suportados:
- **Sensores de temperatura** (`sensor_airtemp_*`): Valores simulados automaticamente
- **Sensores de umidade** (`sensor_airhumid_*`): Valores simulados automaticamente  
- **Atuadores de luz** (`actuator_light_*`): Controle on/off
- **Atuadores de ar-condicionado** (`actuator_air_*`): Controle on/off
- **Atuadores de temperatura** (`actuator_airtemp_*`): Controle numérico

#### Nomenclatura dos dispositivos:
Formato: `<type>_<device>_<place>`
- `type`: sensor ou actuator
- `device`: light, air, airtemp, airhumid
- `place`: meetroom, guarita, reception, office, etc.

### Requisitos do sistema:
- Python 3.6+
- Tkinter (geralmente incluído no Python)
- Bibliotecas padrão: socket, json, threading, hashlib, base64, os, time, datetime

### Notas técnicas:

**Parte 2:**
- Usa TCP para garantir entrega confiável dos arquivos
- Implementa verificação de integridade com hash SHA-256
- Suporta arquivos binários através de codificação Base64
- Thread separada para cada cliente no servidor

**Parte 3:**
- Usa UDP conforme especificado (mais eficiente para monitoramento)
- Interface gráfica intuitiva e funcional
- Simulação realista de sensores ambientais
- Persistência de configuração em arquivo JSON
- Monitoramento automático configurável

### Teste do sistema:

1. Para a **Parte 2**, crie alguns arquivos de teste e teste o upload/download
2. Para a **Parte 3**, execute servidor e cliente, teste todos os comandos via interface gráfica
3. Verifique a persistência alterando valores de atuadores e reiniciando o servidor

Ambas as implementações seguem rigorosamente as especificações da avaliação e incluem tratamento de erros, logs informativos e interfaces.